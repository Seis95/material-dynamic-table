{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/multi-sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.1.1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off.\n    this._tabListContainer.nativeElement.scrollLeft = 0;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {MatMultiSort} from './multi-sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Header display strategy that is different based on type of sort being used.\n */\nexport interface SortHeaderStrategy {\n  isSorted(sortHeader: MatSort | MatMultiSort, id: string): boolean;\n  getDirection(sortHeader: MatSort | MatMultiSort, id: string): SortDirection;\n  getSortCounter(sortHeader: MatSort | MatMultiSort, id: string,\n    getSortCounter: ((position: number, count: number) => string)): string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n  private _sort: MatSort|MatMultiSort;\n\n  private _sortHeaderStrategy: SortHeaderStrategy;\n\n  @Input()\n  getSortCounter: ((position: number, count: number) => string);\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _simpleSort: MatSort,\n              @Optional() public _multiSort: MatMultiSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (_simpleSort) {\n      this._sort = _simpleSort;\n      this._sortHeaderStrategy = new SimpleSortStrategy();\n    } else if (_multiSort) {\n      this._sort = _multiSort;\n      this._sortHeaderStrategy = new MultiSortStrategy();\n    } else {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    let _sort = this._sort;\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sortHeaderStrategy.isSorted(this._sort, this.id);\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    if (this._isSorted()) {\n      this._arrowDirection = this._sortHeaderStrategy.getDirection(this._sort, this.id);\n    } else {\n      this._arrowDirection = (this.start || this._sort.start);\n    }\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n    const direction = this._sortHeaderStrategy.getDirection(this._sort, this.id);\n    return direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /**\n   * Gets the sort counter that will display whenever multisort is enabled. It shows the order\n   * in which sort is applied, whenever there are multiple columns being used for sorting.\n   */\n  _getSortCounter(): string {\n    return this._sortHeaderStrategy.getSortCounter(this._sort, this.id, this.getSortCounter);\n  }\n}\n\n/**\n * Strategy used when MatSort is used\n */\nclass SimpleSortStrategy implements SortHeaderStrategy {\n  isSorted(sortHeader: MatSort, id: string) {\n    return sortHeader.active == id &&\n          (sortHeader.direction === 'asc' || sortHeader.direction === 'desc');\n  }\n\n  getDirection(sortHeader: MatSort): SortDirection {\n    return sortHeader.direction;\n  }\n\n  getSortCounter(): string {\n    return '';\n  }\n}\n\n/**\n * Strategy used when MatMultiSort is used\n */\nclass MultiSortStrategy implements SortHeaderStrategy {\n  isSorted(sortHeader: MatMultiSort, id: string) {\n    return sortHeader.active && sortHeader.active.indexOf(id) > -1 &&\n    (sortHeader.direction[id] === 'asc' || sortHeader.direction[id] === 'desc');\n  }\n\n  getDirection(sortHeader: MatMultiSort, id: string): SortDirection {\n    return sortHeader.direction[id];\n  }\n\n  getSortCounter(sortHeader: MatMultiSort, id: string,\n    getSortCounter: ((position: number, count: number) => string)): string {\n    if (!getSortCounter || !sortHeader.active) {\n      return '';\n    }\n    const index = sortHeader.active.indexOf(id);\n    if (index === -1) {\n      return '';\n    }\n\n    return getSortCounter(index, sortHeader.active.length);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MatMultiSort} from './multi-sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatMultiSort, MatSortHeader],\n  declarations: [MatSort, MatMultiSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, MatMultiSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | MatMultiSort | null { return this._sort; }\n  set sort(sort: MatSort|MatMultiSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|MatMultiSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort | MatMultiSort) => T[]) =\n      (data: T[], sort: MatSort | MatMultiSort): T[] => {\n\n    const active = Array.isArray(sort.active) ? sort.active : [sort.active];\n    if (!active[0]) { return data; }\n\n    const direction = typeof sort.direction !== 'object' ?\n       { [active[0]]: sort.direction } :\n       sort.direction;\n    if (!direction) { return data; }\n\n    return data.sort((a, b) => {\n      // Get effective sort value after comparing all sorted properties, if values were equal for\n      // previous propery then compare the next pair\n      return active.reduce((previous, sortId) => {\n        if (previous !== 0) {\n          return previous;\n        }\n\n        let valueA = this.sortingDataAccessor(a, sortId);\n        let valueB = this.sortingDataAccessor(b, sortId);\n\n        return this.compareValues(valueA, valueB, direction[sortId]);\n      }, 0);\n    });\n  }\n\n  // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n  // one value exists while the other doesn't. In this case, existing value should come first.\n  // This avoids inconsistent results when comparing values to undefined/null.\n  // If neither value exists, return 0 (equal).\n  compareValues(valueA: string | number, valueB: string | number, direction: string) {\n    let comparatorResult = 0;\n    if (direction == '') {\n      return comparatorResult;\n    }\n\n    if (valueA != null && valueB != null) {\n      // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n      if (valueA > valueB) {\n        comparatorResult = 1;\n      } else if (valueA < valueB) {\n        comparatorResult = -1;\n      }\n    } else if (valueA != null) {\n      comparatorResult = 1;\n    } else if (valueB != null) {\n      comparatorResult = -1;\n    }\n\n    return comparatorResult * (direction == 'asc' ? 1 : -1);\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  HasInitialized\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getMultiSortInvalidDirectionError,\n} from './sort-errors';\nimport {\n  MatSortable,\n  _MatSortMixinBase\n} from './sort';\n\n/** The current sort state. */\nexport interface MultiSort {\n  /** The id of the column being sorted. */\n  active: string[];\n\n  /** The sort direction. */\n  direction: { [id: string]: SortDirection };\n}\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matMultiSort]',\n  exportAs: 'matMultiSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatMultiSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The array of active sort ids. Order defines sorting precedence.\n   */\n  @Input('matSortActive') active: string[];\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /**\n   * The sort direction of the currently active MatSortable. If multicolumn sort is enabled\n   * this will contain a dictionary of sort directions for active MatSortables.\n   */\n  @Input('matSortDirection')\n  get direction(): { [id: string]: SortDirection } { return this._direction; }\n  set direction(direction: { [id: string]: SortDirection }) {\n    if (isDevMode() && direction && !this.isSortDirectionValid(direction)) {\n      throw getMultiSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: { [id: string]: SortDirection } = {};\n\n  isSortDirectionValid(direction: { [id: string]: SortDirection }): boolean {\n    return Object.keys(direction).every((id) => this.isIndividualSortDirectionValid(direction[id]));\n  }\n\n  isIndividualSortDirectionValid(direction: string): boolean {\n    return !direction || direction === 'asc' || direction === 'desc';\n  }\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange')\n  readonly sortChange: EventEmitter<MultiSort> = new EventEmitter<MultiSort>();\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (!Array.isArray(this.active)) {\n      this.active = [sortable.id];\n      this.direction[sortable.id] = sortable.start ? sortable.start : this.start;\n    } else {\n      const index = this.active.indexOf(sortable.id);\n      if (index === -1) {\n        this.active.push(sortable.id);\n        this.direction[sortable.id] = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction[sortable.id] = this.getNextSortDirection(sortable);\n        if (!this.direction[sortable.id]) {\n          this.active.splice(index, 1);\n        }\n      }\n    }\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start);\n\n    // Get and return the next direction in the cycle\n    let direction = this.direction[sortable.id];\n    let nextDirectionIndex = sortDirectionCycle.indexOf(direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc'): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  sortOrder.push('');\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      return selectElement.multiple || !this.empty || this.focused ||\n          !!(firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/** @docs-private */\nexport function getMultiSortInvalidDirectionError(direction: { [id: string]: string }): Error {\n  let values = typeof direction === 'object' ?\n    Object.keys(direction).map((id) => direction[id]) :\n    direction;\n  return Error(`${values} are not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","viewContainer","type","Directive","args","selector","ViewContainerRef","MatTreeNodeOutlet","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_elementRef","_tree","tabIndex","_this","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","String","decorators","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTab","_implicitContent","ViewChild","TemplateRef","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","Math","round","v","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","platform","globalOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","_ripplesGloballyDisabled","rippleConfig","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatSortHeader","sortHeader","direction","SimpleSortStrategy","id","indexOf","getSortCounter","MultiSortStrategy","MatSortModule","MatSort","MatMultiSort","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_a","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","reduce","previous","sortId","valueA","valueB","compareValues","filterPredicate","dataStr","keys","currentTerm","key","toLowerCase","transformedFilter","_updateChangeSubscription","_sort","_paginator","paginator","comparatorResult","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","sortables","Map","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","_MatSortMixinBase","mixinInitialized","start","_direction","getSortInvalidDirectionError","_disableClear","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","isSortDirectionValid","getMultiSortInvalidDirectionError","every","isIndividualSortDirectionValid","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_simpleSort","_multiSort","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","_sortHeaderStrategy","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","isSorted","_getArrowDirectionState","_getArrowViewState","getDirection","_getAriaSortAttribute","_getSortCounter","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","_right","opened","mode","_width","_contentMargins","_contentMarginChanges","MatDrawerContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","fromEvent","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_left","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","MatTooltip","_isTooltipVisible","_tooltipInstance","isVisible","e","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","_updatePosition","_detach","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","_updateTooltipMessage","updatePosition","_setTooltipClass","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_onHide","_isHandset","delay","_hideTimeoutId","_showTimeoutId","afterHidden","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","menu","lazyContent","MatMenuTrigger","_initMenu","parentMenu","triggersSubmenu","_parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","_resetMenu","_menuOpen","menuOpened","menuClosed","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","hasBackdrop","backdropClass","setPositionClasses","posX","connectionPair","posY","_setPosition","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_cleanUpSubscriptions","_closeSubscription","_hoverSubscription","_menuClosingActions","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","toggleMenu","_handleHover","asapScheduler","MatMenu","_isAnimating","_getPortal","_portal","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","menuData","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","hasModifierKey","altKey","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","_ariaDescriber","hammerLoader","_message","_manualListeners","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeDescription","describe","_tooltipClass","removeEventListener","MatListOption","MatSelectionList","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","_attached","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_startAnimation","_resetAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_menuCloseSubscription","_handleTouchStart","_menu","reason","_destroyMenu","closeMenu","menuOpen","_isInteractiveList","navList","list","_getListType","_list","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","MatExpansionModule","CdkAccordionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","align","[class.mat-card-actions-align-end]","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatError","MatHint","MatLabel","MatPlaceholder","MatPrefix","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","badgeElement","_badgeElement","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}